pip install ***
pip install ***.zip/tar.gz/tar (本地下载文件)
pip install -e git+https://github.com/**** git地址下载
pip install *** -i **** (指定源下载)
pip install ***==*.*.* （安装指定版本）


pip install -U ***（已经安装就升级到最新）

pip 安装依赖 [] 中为依赖安装 多个用,分割
pip install ***[**1,**2]


python 学习地址 https://blog.csdn.net/Akino_Rito/article/details/79646589
https://blog.csdn.net/hanzihan123/article/details/41898643

python 项目查找网址
https://pypi.org/

绝对引用时用
from __future__ import absolute_import


时间模块处理
pip install moment
https://github.com/zachwill/moment

版本管理
pythonz
https://github.com/saghul/pythonz

mongo orm 工具包 mongoengine
https://github.com/hmarr/mongoengine

命令工具模块 有command group(含子命令)
pip install click
https://www.cnblogs.com/alexkn/p/6980400.html

JCC python java c++ 模块
JCC 是 Python 的一个包，主要用来生成 C++ 代码以在 C++ 和 Python 程序中调用 Java 代码
pip install JCC
https://pypi.org/project/JCC/#downloads

FLASK
数据迁移模块 Alembic
pip install Flask-Migrate

股票模块
pip install tushare --upgrade
http://tushare.org/index.html#id3

sql 解析工具
sqlparse有几个最简单的工具：split，format，parse，分别是提取sql单个语句、格式化sql的语句以及解析sql
pip install sqlparse

sql  语句对象化
https://pypi.org/project/python-sql/
pip install python-sql
'''
>>> from sql import *
>>> from sql.aggregate import *
>>> from sql.conditionals import *
'''

显示货币格式以及它的数值
pip install currencies

Regal 是一个用于"灰度发布"或 A/B Testing的智能分组引擎
pip install regal
https://www.oschina.net/p/regal
https://pypi.org/project/regal/

权限管理
pip install simple-rbac
https://github.com/tonyseek/simple-rbac

redis 对象化
https://pypi.org/project/redisco/
pip install redisco
'''
from redisco import models

'''

python 版本dns
https://github.com/rthalley/dnspython.git

url 短地址
pip install pyshorteners
https://pypi.org/project/pyshorteners/

JWT 只支持python3
pip install jwt
https://pypi.org/project/jwt/


pyquery 像jquery操作html
https://pythonhosted.org/pyquery/
https://github.com/gawel/pyquery

python库——robobrowser
轻量的爬虫 简单的内存浏览器
pip install robobrowser -i http://pypi.douban.com/simple/

网页动态爬虫
ghost driver 与selenium合体的过程
http://www.cnblogs.com/nbkhic/p/4217714.html

envoy
Python Subprocesses for Humans
pip install envoy
https://github.com/kennethreitz/envoy
https://blog.csdn.net/junli_chen/article/details/78295454 功能说明
'''
import envoy
r = envoy.run()
r.status_code
r.std_out
r.history

run 函数
run(command, data=None, timeout=None, kill_timeout=None, env=None, cwd=None) 函数是 envoy 模块的主要接口，用来在子进程里执行 Shell 命令。

首先解释一下 run() 函数的各个参数的含义

command 需要执行的 Shell 命令（可以包含管道，但是不允许包含 && 或者 ; 之类的符号）；
data 通过管道传入 Shell 命令的内容；
timeout 子进程执行超时时间；
kill_timeout 终止子进程失败的超时时间，超过这个时间将直接杀死子进程；
env 环境变量；
cwd Current Working Directory，工作目录
'''

日志工具
pip install Logbook

函数编程问题
pip install cytoolz

fn.py
http://www.infoq.com/cn/articles/fn.py-functional-programming-python

包管理工具
pip install curdling
curd install flask

搭建自己的python 源站
配置文件是~/.pip/pip.conf
pypiserver
https://blog.csdn.net/wangjianno2/article/details/53365089
发布命令
python setup.py register -r test-pypi
python setup.py sdist upload -r test-pypi



pip-tools：保证 Python 包依赖关系更新的一组工具
pip install pip-tools
https://pypi.org/project/pip-tools/


多进程处理
https://blog.csdn.net/mmc2015/article/details/51835190

pip install joblib
https://pypi.org/project/joblib/
'''
from joblib import Parallel, delayed
Parallel(n_jobs=2) #多进程处理
函数delayed是一个创建元组(function, args, kwargs)的简单技巧
默认情况下，Parallel使用Python的多进程模块(multiprocessing)来fork工作进程
为了使用多线程，只需在构造Parallel的时候设置backend='threading'即可
Parallel(n_jobs=2, backend="threading")

'''

python模块之codecs: 自然语言编码转换

邮件处理
pip3 install flask-mail

from flask_mail import Mail
mail=Mail(app)
https://www.toutiao.com/a6564588239519220231/?tt_from=weixin&utm_campaign=client_share&timestamp=1528462040&app=news_article&utm_source=weixin&iid=25816655942&utm_medium=toutiao_android&wxshare_count=1


flask 表单校验模块
pip install flask-wtf
https://blog.csdn.net/kuangshp128/article/details/62233246

'''
一、安装pip install flask-wtf
二、创建一个flask的项目引入相对应的包
from flask import Flask,render_template
import flask
#引入模块
from flask_wtf import FlaskForm,CsrfProtect
#如果输入的是字符串那么就用StringField,如果是整数那么就用IntegerField
from wtforms import StringField,IntegerField
#验证方式
from wtforms.validators import Length,EqualTo,InputRequired
1
2
3
4
5
6
7
8
三、配置文件
#coding:utf8
import os
SECRET_KEY = os.urandom(24)
1
2
3
四、配置
import config
app = Flask(__name__)
app.debug = True
app.config.from_object(config)
CsrfProtect(app)
1
2
3
4
5
五、创建一个验证的类
class RegistForm(FlaskForm):
    username = StringField(validators=[Length(min=3,max=10,message=u"用户名长度有问题")])
    password = StringField(validators=[Length(min=6,max=20)])
    age = IntegerField(validators=[InputRequired()])
1
2
3
4
六、在路由代码中使用
@app.route('/',methods=["GET","POST"])
def index():
    if flask.request.method == "GET":
        return render_template("index.html")
    else:
        form = RegistForm(flask.request.form)
        if form.validate():
            username = form.username.data
            password =form.password.data
            print username,password
            return u"登录成功"
        else:
            print form.errors
            return u"错误"
1
2
3
4
5
6
7
8
9
10
11
12
13
14
注意点:创建的验证类的字段要和前端html模板页面的name值的一样的

七、WTForms支持的HTML标准字段
字段类型      说　　明
StringField 文本字段
TextAreaField 多行文本字段
PasswordField 密码文本字段
HiddenField 隐藏文本字段
DateField 文本字段，值为 datetime.date 格式
DateTimeField 文本字段，值为 datetime.datetime 格式
IntegerField 文本字段，值为整数
DecimalField 文本字段，值为 decimal.Decimal
FloatField 文本字段，值为浮点数
BooleanField 复选框，值为 True 和 False
RadioField 一组单选框
SelectField 下拉列表
SelectMultipleField 下拉列表，可选择多个值
FileField 文件上传字段
SubmitField 表单提交按钮
FormField 把表单作为字段嵌入另一个表单
FieldList 一组指定类型的字段
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
八、常见的验证函数
验证函数 说　　明
Email 验证电子邮件地址
EqualTo 比较两个字段的值；常用于要求输入两次密码进行确认的情况
IPAddress 验证 IPv4 网络地址
Length 验证输入字符串的长度
NumberRange 验证输入的值在数字范围内
Optional 无输入值时跳过其他验证函数
Required 确保字段中有数据
Regexp 使用正则表达式验证输入值
URL 验证 URL
AnyOf 确保输入值在可选值列表中
NoneOf 确保输入值不在可选值列表中
'''

flask  跨域问题
pip install flask-cors

from flask_cors import *

app = Flask(__name__)
CORS(app, supports_credentials=True)


命令行输入菜单模式
pip install tty_menu

'''
from tty_menu import tty_menu

l = ['a', 'b', 'c']
pos = tty_menu(l, "What is your word?")

print("Your word is %s" % (l[pos]))
'''

Flask-Markdown markdown 渲染
pip install Flask-Markdown
https://pythonhosted.org/Flask-Markdown/

Markdown  处理
pip install Markdown
pip install markdown

#密码输入使用
import getpass
a = getpass.getpass('input passwd:')

#linux 环境下使用
import sys, tty, termios
https://www.cnblogs.com/Richardzhu/p/5162289.html

Dramatiq 是一个 Python 3 （3.5或更高版本）分布式任务处理库
https://www.oschina.net/p/Dramatiq


# pip --help

Usage:
  pip <command> [options]

Commands:
  install                     安装包.
  uninstall                   卸载包.
  freeze                      按着一定格式输出已安装包列表
  list                        列出已安装包.
  show                        显示包详细信息.
  search                      搜索包，类似yum里的search.
  wheel                       Build wheels from your requirements.
  zip                         不推荐. Zip individual packages.
  unzip                       不推荐. Unzip individual packages.
  bundle                      不推荐. Create pybundles.
  help                        当前帮助.

General Options:
  -h, --help                  显示帮助.
  -v, --verbose               更多的输出，最多可以使用3次
  -V, --version               现实版本信息然后退出.
  -q, --quiet                 最少的输出.
  --log-file <path>           覆盖的方式记录verbose错误日志，默认文件：/root/.pip/pip.log
  --log <path>                不覆盖记录verbose输出的日志.
  --proxy <proxy>             Specify a proxy in the form [user:passwd@]proxy.server:port.
  --timeout <sec>             连接超时时间 (默认15秒).
  --exists-action <action>    Default action when a path already exists: (s)witch, (i)gnore, (w)ipe, (b)ackup.
  --cert <path>               证书.



inspect python 模块内容检测模块
'''
inspect.signature（fn)将返回一个inspect.Signature类型的对象，值为fn这个函数的所有参数

inspect.Signature对象的paramerters属性是一个mappingproxy（映射）类型的对象，值为一个有序字典（Orderdict)。

这个字典里的key是即为参数名，str类型

这个字典里的value是一个inspect.Parameter类型的对象，根据我的理解，这个对象里包含的一个参数的各种信息

inspect.Parameter对象的kind属性是一个_ParameterKind枚举类型的对象，值为这个参数的类型（可变参数，关键词参数，etc）

inspect.Parameter对象的default属性：如果这个参数有默认值，即返回这个默认值，如果没有，返回一个inspect._empty类。
'''



Pyrex 是一种专门设计用来编写 Python 扩展模块的语言


浏览器实现的python 解析器
http://www.skulpt.org/

python 数值计算库 类numpy
blaze
https://github.com/blaze/blaze
Pandas 是python的一个数据分析包
pip install pandas

python svg 库
pip install pygal
https://github.com/Kozea/pygal


denyhosts SSHD自动屏蔽IP的功能
https://github.com/denyhosts/denyhosts


ooredis 基于 redis-py 之上的一个 Mapper ，让你以更 pythonic 的方式来操作 Redis
https://github.com/huangz1990/ooredis


python 工作流
Pinball 是由 Pinterest 开发的可伸缩工作流管理器，提供高度可定制的特性
https://www.oschina.net/translate/open-sourcing-pinball 中文说明
https://github.com/pinterest/pinball
pip install pinball



piep (发音 “pipe”) 是一个命令行工具，它可以让你使用 Python 的语法来调用 awk, sed, grep, tr, cut 等工具，因为这些工具的使用参数非常复杂，使用 piep 就可以简化这些工具的使用
http://gfxmonk.net/dist/doc/piep/#getting-it 工具使用说明
pip install piep

piep 代替awk, sed, grep, tr, cut


Whoosh 是一个纯python实现的全文搜索组件。Whoosh不但功能完善，还非常的快
https://pypi.org/project/Whoosh/
pip install Whoosh

https://github.com/gyllstromk/Flask-WhooshAlchemy
pip install flask_whooshalchemy


RedLock Python 和 Redis 实现的分布式锁
https://github.com/glasslion/redlock

markdown工具
pip install mkdocs
mkdocs --version
http://www.mkdocs.org/
https://github.com/mkdocs/mkdocs/
使用方法
mkdocs new my-project
cd my-project
mkdocs serve
https://blog.csdn.net/kevindgk/article/details/52388542


postgresql 工具
pip install PyGreSQL
https://pypi.org/project/PyGreSQL/


BT是一个灵活的Python量化回溯测试框架，用于检验量化交易策略。该框架允许用户轻松地创建策。
FFN是一个Python的金融功能分析模块库，包含许多量化金融常用的功能，包括投资回报分析、绘图及常用的数据变换。
bt项目网址，http://pmorissette.github.io/bt/
fn项目网址，http://pmorissette.github.io/ffn/



Celery是Python开发的分布式任务调度模块
pip install Celery


图像处理函数库
pip install pymorph
http://luispedro.org/software/pymorph/
https://pythonhosted.org/pymorph/

tproxy tcp代理
pip install tproxy
https://github.com/benoitc/tproxy

clojure-py clojure  python 实现
https://github.com/drewr/clojure-py


cheat 命令提醒工具
pip install cheat
https://github.com/chrisallenlane/cheat


Pykka 项目的目的是为 Python 提供了易用的并发操作抽象层，使用 Actor 模式
pip install pykka
https://github.com/jodal/pykka

自动测试工具
pip install nose
命令
nosetests


转拼音工具
pip install pypinyin
文档
https://pypi.org/project/pypinyin/


celery 监控工具
$ pip install celery[librabbitmq]
$ pip install celery[librabbitmq,redis,auth,msgpack]
https://blog.csdn.net/qq_28921653/article/details/79555212


以下是可用的捆绑：

序列化
celery[auth]:	使用 auth 序列化。
celery[msgpack]:
 	使用 msgpack 序列化。
celery[yaml]:	使用 yaml 序列化。
并发
celery[eventlet]:
 	使用 eventlet 池。
celery[gevent]:	使用 gevent 池。
celery[threads]:
 	使用线程池。
传输和后端
celery[librabbitmq]:
 	使用 librabbitmq 的 C 库.
celery[redis]:	使用 Redis 作为消息传输方式或结果后端。
celery[mongodb]:
 	使用 MongoDB 作为消息传输方式（ 实验性 ），或是结果后端（ 已支持 ）。
celery[sqs]:	使用 Amazon SQS 作为消息传输方式（ 实验性 ）。
celery[memcache]:
 	使用 memcache 作为结果后端。
celery[cassandra]:
 	使用 Apache Cassandra 作为结果后端。
celery[couchdb]:
 	使用 CouchDB 作为消息传输方式（ 实验性 ）。
celery[couchbase]:
 	使用 CouchBase 作为结果后端。
celery[beanstalk]:
 	使用 Beanstalk 作为消息传输方式（ 实验性 ）。
celery[zookeeper]:
 	使用 Zookeeper 作为消息传输方式。
celery[zeromq]:	使用 ZeroMQ 作为消息传输方式（ 实验性 ）。
celery[sqlalchemy]:
 	使用 SQLAlchemy 作为消息传输方式（ 实验性 ），或作为结果后端（ 已支持 ）。
celery[pyro]:	使用 Pyro4 消息传输方式（ 实验性 ）。
celery[slmq]:	使用 SoftLayer Message Queue 传输（ 实验性 ）。

pip install flower
https://pypi.org/project/flower/
http://flower.readthedocs.io/en/latest/install.html#usage
'''
flower -A proj --port=5555
celery flower -A proj --address=127.0.0.1 --port=5555
celery flower -A proj --broker=amqp://guest:guest@localhost:5672//
'''



kombu消息框架
https://blog.csdn.net/weixin_37947156/article/details/76374347
https://blog.csdn.net/spch2008/article/details/11530007
http://kombu.readthedocs.io/en/latest/
pip install kombu
https://github.com/celery/kombu


flask  websocket 支持
Flask-Sockets和Flask-SocketIO
pip install Flask-SocketIO
https://blog.csdn.net/u012062760/article/details/53993306


socketIO 客户端
pip install socketIO-client
https://pypi.org/project/socketIO-client/
https://github.com/miguelgrinberg/Flask-SocketIO/  查看下demo 学习
socketio的start_background_task函数用于新建一个线程，处理业务，在线程中在请求上下文中调用收发功能函数
https://github.com/shenyushun/flask-socketio-doc-zh/blob/master/Flask-SocketIO%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3.md

python 时区模块
pip install pytz
https://pypi.org/project/pytz/

依赖包管理
pip install pigar
https://github.com/Damnever/pigar

pymesos 是一个纯 Python 开发的 Mesos 调度器和执行器
pip install pymesos
https://github.com/douban/pymesos
A pure python implementation of Apache Mesos scheduler, executor and operator.

textract 是一个 Python 库，用来从各种文档中提取文本信息
pip install textract
https://github.com/deanmalmgren/textract
http://textract.readthedocs.io/en/stable/


pip install mongopool
https://github.com/uberVU/mongo-pool



flask-compress会给http响应增加两个http头：vary、content-encoding,并压缩响应的数据
pip install Flask-Compress
from flask_compress import Compress
app = Flask(__name__)
Compress(app)

登录模块
https://www.cnblogs.com/minsons/p/8045916.html
pip install flask_login
login_manager = LoginManager()
app.config[‘SECRET_KEY‘]=‘234324234‘   #随意设置
login_manager.init_app(app)


coverage 测试代码块覆盖率
pip install coverage


Zipline python（股票）算法交易库
pip install zipline

内存管理
pip install psutil


使用 Python RQ 的 Python 执行后台任务
pip install rq
http://python-rq.org/
http://xiaorui.cc/2015/04/01/python-rq%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97/


https://github.com/mattupstate/flask-rq
pip install flask-rq
pip install rq-dashboard

Flask
app.run()中可以接受两个参数，分别是threaded和processes，用于开启线程支持和进程支持。

延时执行
pip install python-delay==0.4
https://pypi.org/project/python-delay/


python 调试工具
pip install pudb

定时任务 编辑系统crontab 任务
pip install python-crontab
https://pypi.org/project/python-crontab/

轻量级定时任务
pip install schedule

错误检查模块
pip install faulthandler
import faulthandler
faulthandler.enable()

TOKEN 认证
flask-httpauth
https://www.cnblogs.com/Erick-L/p/7060806.html


python 爬虫框架
pip install Scrapy
http://scrapy-chs.readthedocs.io/zh_CN/latest/intro/tutorial.html

创建一个Scrapy项目
scrapy startproject myclaw

scrapy crawl dmoz

创建一个新的spider:

scrapy genspider mydomain mydomain.com

全局命令:

startproject
settings
runspider
shell
fetch
view
version
项目(Project-only)命令:

crawl
check
list
edit
parse
genspider
deploy
bench

创建模版
scrapy genspider -d basic

查看列表
scrapy list

jwt python版本
pip install pyjwt
'''
import jwt

encoded_jwt = jwt.encode({'some': 'payload'}, 'secret', algorithm='HS256')
encoded_jwt
'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzb21lIjoicGF5bG9hZCJ9.4twFt5NiznN84AWoo1d7KO1T_yoc0Z6XOpOVswacPZg'

jwt.decode(encoded_jwt, 'secret', algorithms=['HS256'])
{'some': 'payload'}
'''

xpath
import codecs
from lxml import etree



流计算
pip install pulsar

pip install streamparse
https://github.com/Parsely/streamparse

Luigi是基于python语言的，可帮助建立复杂流式批处理任务管理系统
pip install luigi

Kivy python 写android
pip install Kivy

主流的比较流行的Python量化开源框架
https://www.jianshu.com/p/1658f319bfdc

分布式计算框架
pip install dispy
https://blog.csdn.net/suzyu12345/article/details/53909688
http://dispy.sourceforge.net/index.html docs
http://dispy.sourceforge.net/dispy.html
python -m pip install pycos
提供服务
dispynode.py -c 2 -i 192.168.0.121 -p 51348 -s secret
一行命令处理
dispy.py -f /some/file1 -f file2 -a "arg11 arg12" -a "arg21 arg22" -a "arg3" /some/program


提速装饰器
pip install decorator
https://github.com/micheles/decorator
from decorator import decorator


发邮件
pip install yagmail[all]
https://github.com/kootenpv/yagmail


python分布式计算框架PP(Parallel Python)集群模式
pip install pp 即可安装pp库
https://www.parallelpython.com/content/view/17/31/

事件触发
pip install pyee
https://pyee.readthedocs.io/en/latest/

In [1]: from pyee import EventEmitter

In [2]: ee = EventEmitter()

In [3]: @ee.on('event')
   ...: def event_handler():
   ...:     print('BANG BANG')
   ...:

In [4]: ee.emit('event')
BANG BANG

In [5]:


颜色日志化
pip install hues
https://github.com/prashnts/hues

数字人可见
pip install -e git+https://github.com/jmoiron/humanize.git
https://github.com/jmoiron/humanize

表格化显示
pip install tabulate
https://pypi.org/project/tabulate/


python的numba加速
pip install numba
https://pypi.org/project/numba/

日志处理
pip install structlog

时间美化
pip install Delorean


Cola：一个分布式爬虫框架
依赖
pip install pyyaml


web 框架
https://pypi.org/project/falcon/
pip install falcon

网络框架
https://pypi.org/project/diesel/
pip install diesel


ip访问限制
flask_limiter
http://flask-limiter.readthedocs.io/en/stable/
https://pypi.org/project/Flask-Limiter/
pip install Flask-Limiter


速率限制
https://pypi.org/project/ratelimiter/
pip install ratelimiter


'''
flask + gevent
'''
from gevent import monkey
monkey.patch_all()
from flask import Flask
from gevent import pywsgi

app = Flask(__name__)

@app.route('/')
def index():
    return 'Hello World'

server = pywsgi.WSGIServer(('127.0.0.1', 5000), app)
server.serve_forever()


http://python.jobbole.com/84003/
FLASK 获取用户真实IP
从request.headers获取

Python

real_ip = request.headers.get('X-Real-Ip', request.remote_addr)
1
real_ip = request.headers.get('X-Real-Ip', request.remote_addr)
或者, 使用werkzeug的middleware 文档

Python

from werkzeug.contrib.fixers import ProxyFix
app.wsgi_app = ProxyFix(app.wsgi_app)
1
2
from werkzeug.contrib.fixers import ProxyFix
app.wsgi_app = ProxyFix(app.wsgi_app)



https://www.zhihu.com/question/23760468
上下文 管理器
from contextlib import contextmanager


python调试
pip install pystack
pip install pdbx
pip install remote-pdb
pip install pystack-debugger

用法
@property

@cached-property
pip install cached-property

from cached_property import threaded_cached_property

from cached_property import cached_property_with_ttl



并行处理包
concurrent
concurrent.futures

socketpair知识学习(区别于socket，不需要走网络协议栈)


简单身份认证
pip install sasl==0.2.1
pip install pure-sasl

压缩
python-lz4 (pip install lz4)


高效异步事件处理
pip install uvloop


爬虫框架
https://github.com/gaojiuli/gain/


微服务框架  nameko
pip install nameko
https://blog.csdn.net/ainibc/article/details/78292177?utm_source=5ibc.net&utm_medium=referral

学习文档
https://github.com/junneyang/nameko-demo


Easy Swagger UI for your Flask API
pip install flasgger==0.8.0
https://pypi.org/project/flasgger/0.8.0/
http://localhost:5000/apidocs/

swagger 教程
https://legacy.gitbook.com/book/huangwenchao/swagger/details

高性能web框架

japronto
https://github.com/squeaky-pl/japronto


python esb 消息总线
https://zato.io/downloads.html

snownlp情感分析源码解析
https://github.com/isnowfy/snownlp


微服务搭建
## 安装微服务框架
pip install nameko==2.5.4.4
## 安装api框架
pip install nameko-swagger==1.2.7
## 创建项目
nameko-admin createproject demo

https://blog.csdn.net/wind_602/article/details/78863955


python3.5 web
python -m pip install sanic


python  缓存
pip install aiocache
pip install aiocache[redis]
pip install aiocache[memcached]
pip install aiocache[redis,memcached]
pip install aiocache[msgpack]


conda
conda类似于npm或maven的包管理工具，只是conda是针对于python的
https://blog.csdn.net/koflance/article/details/78582737

anaconda  Miniconda

WebUI是一个Python模块，允许您使用三行代码将Flask应用程序转换为跨平台桌面应用程序。
pip install WebUI
https://pypi.org/project/WebUI/

from WebUI import WebUI # Add WebUI to your imports
from flask import Flask, render_template, request

app = Flask(__name__)
ui = WebUI(app, debug=True) # Create a WebUI instance

# all of your standard flask logic

if __name__ == '__main__':
  ui.run()



nanomsg-python
pip install nanomsg
from nanomsg import Socket, PAIR, PUB

LevelDB是Google开源的持久化KV单机数据库，具有很高的随机写，顺序读/写性能，但是随机读的性能很一般，也就是说，LevelDB很适合应用在查询较少，而写很多的场景
leveldb
pip install  leveldb

pep8 规范
https://blog.csdn.net/ratsniper/article/details/78954852


python 路由
pip install Routes


https://pypi.org/project/MechanicalSoup/
pip install MechanicalSoup
python3.0 一个与网站自动化交互的Python库


python 学习网址
https://blog.csdn.net/dev_csdn/article/details/79060720


渗透测试框架-Fsociety
http://www.mamicode.com/info-detail-2162631.html

monkeytype 一个可以自动添加注释的模块！ 3.5以上
pip install monkeytype

交互式报表
pip install dash==0.18.3
https://blog.csdn.net/hu_zhenghui/article/details/78378844


flask 微服务
pip install flask_nameko
https://github.com/jessepollak/flask-nameko
微服务用法
from nameko.standalone.rpc import ClusterRpcProxy


Prophet
Facebook支持python的开源预测工具Prophet
https://github.com/prestodb/presto
https://pypi.org/project/prophet/
pip install prophet

pipenv是requests作者的一个项目, 整合了virtualenv, pip, pipfile, 用于更方便地为项目建立虚拟环境并管理虚拟环境中的第三方模块
pip install pipenv


pip install graphviz
数据可视化的时候用到了graphviz库，用于生成决策树、流程图效果

时序数据库使用
pip install influxdb
from influxdb import InfluxDBClient

js解析器
pip install Js2Py
import js2py

f = js2py.eval_js( “function $(name) {return name.length}” )

f(“Hello world”)


使用 arangoDB
pip install pyarango --user
from pyArango.connection import *
conn = Connection(username="root", password="root_passwd")


redis内存分析工具 redis-rdb-tools
pip install rdbtools
使用 redis-rdb-tools 生成内存快照
rdb -c memory dump.rdb > memory.csv

$ rdb [options] /path/to/dump.rdb
-c FILE       #指定rdb文件;
-f FILE       #指定导出文件;
-n DBS        #解析指定数据库,如果不指定默认包含所有;
-k KEYS       #指定需要导出的KEY,可以使用正则表达式;
-o NOT_KEYS   #指定不需要导出的KEY,可以使用正则表达式;
-t TYPES      #指定解析的数据类型,可能的值有:string,hash,set,sortedset,list;可以提供多个类型,如果没有指定,所有数据类型都返回;
-b BYTES      #限制输出KEY大大小;
-l LARGEST    #根据大小限制的top key;
-e ESCAPE     #指定输出编码,默认RAW;

pip install lmdb

python 椭圆算法
pip install ecc


忽略告警
import warnings
warnings.filterwarnings("ignore")

金融处理
pip install Quandl
