pip install ***
pip install ***.zip/tar.gz/tar (本地下载文件)
pip install -e git+https://github.com/**** git地址下载
pip install *** -i **** (指定源下载)
pip install ***==*.*.* （安装指定版本）


pip install -U ***（已经安装就升级到最新）

命令工具模块 有command group(含子命令)
pip install click
https://www.cnblogs.com/alexkn/p/6980400.html

FLASK
数据迁移模块 Alembic
pip install Flask-Migrate

股票模块
pip install tushare --upgrade
http://tushare.org/index.html#id3

sql 解析工具
sqlparse有几个最简单的工具：split，format，parse，分别是提取sql单个语句、格式化sql的语句以及解析sql
pip install sqlparse

sql  语句对象化
https://pypi.org/project/python-sql/
pip install python-sql
'''
>>> from sql import *
>>> from sql.aggregate import *
>>> from sql.conditionals import *
'''

显示货币格式以及它的数值
pip install currencies

redis 对象化
https://pypi.org/project/redisco/
pip install redisco
'''
from redisco import models

'''

python 版本dns
https://github.com/rthalley/dnspython.git

url 短地址
pip install pyshorteners
https://pypi.org/project/pyshorteners/

JWT 只支持python3
pip install jwt
https://pypi.org/project/jwt/


pyquery 像jquery操作html
https://pythonhosted.org/pyquery/
https://github.com/gawel/pyquery

python库——robobrowser
轻量的爬虫 简单的内存浏览器
pip install robobrowser -i http://pypi.douban.com/simple/

网页动态爬虫
ghost driver 与selenium合体的过程
http://www.cnblogs.com/nbkhic/p/4217714.html

envoy
Python Subprocesses for Humans
pip install envoy
https://github.com/kennethreitz/envoy
https://blog.csdn.net/junli_chen/article/details/78295454 功能说明
'''
import envoy
r = envoy.run()
r.status_code
r.std_out
r.history

run 函数
run(command, data=None, timeout=None, kill_timeout=None, env=None, cwd=None) 函数是 envoy 模块的主要接口，用来在子进程里执行 Shell 命令。

首先解释一下 run() 函数的各个参数的含义

command 需要执行的 Shell 命令（可以包含管道，但是不允许包含 && 或者 ; 之类的符号）；
data 通过管道传入 Shell 命令的内容；
timeout 子进程执行超时时间；
kill_timeout 终止子进程失败的超时时间，超过这个时间将直接杀死子进程；
env 环境变量；
cwd Current Working Directory，工作目录
'''

日志工具
pip install Logbook

函数编程问题
pip install cytoolz

fn.py
http://www.infoq.com/cn/articles/fn.py-functional-programming-python

包管理工具
pip install curdling
curd install flask

搭建自己的python 源站
配置文件是~/.pip/pip.conf
pypiserver
https://blog.csdn.net/wangjianno2/article/details/53365089
发布命令
python setup.py register -r test-pypi
python setup.py sdist upload -r test-pypi



pip-tools：保证 Python 包依赖关系更新的一组工具
pip install pip-tools
https://pypi.org/project/pip-tools/


多进程处理
https://blog.csdn.net/mmc2015/article/details/51835190

pip install joblib
https://pypi.org/project/joblib/
'''
from joblib import Parallel, delayed
Parallel(n_jobs=2) #多进程处理
函数delayed是一个创建元组(function, args, kwargs)的简单技巧
默认情况下，Parallel使用Python的多进程模块(multiprocessing)来fork工作进程
为了使用多线程，只需在构造Parallel的时候设置backend='threading'即可
Parallel(n_jobs=2, backend="threading")

'''

python模块之codecs: 自然语言编码转换


flask 表单校验模块
pip install flask-wtf
https://blog.csdn.net/kuangshp128/article/details/62233246

'''
一、安装pip install flask-wtf
二、创建一个flask的项目引入相对应的包
from flask import Flask,render_template
import flask
#引入模块
from flask_wtf import FlaskForm,CsrfProtect
#如果输入的是字符串那么就用StringField,如果是整数那么就用IntegerField
from wtforms import StringField,IntegerField
#验证方式
from wtforms.validators import Length,EqualTo,InputRequired
1
2
3
4
5
6
7
8
三、配置文件
#coding:utf8
import os
SECRET_KEY = os.urandom(24)
1
2
3
四、配置
import config
app = Flask(__name__)
app.debug = True
app.config.from_object(config)
CsrfProtect(app)
1
2
3
4
5
五、创建一个验证的类
class RegistForm(FlaskForm):
    username = StringField(validators=[Length(min=3,max=10,message=u"用户名长度有问题")])
    password = StringField(validators=[Length(min=6,max=20)])
    age = IntegerField(validators=[InputRequired()])
1
2
3
4
六、在路由代码中使用
@app.route('/',methods=["GET","POST"])
def index():
    if flask.request.method == "GET":
        return render_template("index.html")
    else:
        form = RegistForm(flask.request.form)
        if form.validate():
            username = form.username.data
            password =form.password.data
            print username,password
            return u"登录成功"
        else:
            print form.errors
            return u"错误"
1
2
3
4
5
6
7
8
9
10
11
12
13
14
注意点:创建的验证类的字段要和前端html模板页面的name值的一样的

七、WTForms支持的HTML标准字段
字段类型      说　　明
StringField 文本字段
TextAreaField 多行文本字段
PasswordField 密码文本字段
HiddenField 隐藏文本字段
DateField 文本字段，值为 datetime.date 格式
DateTimeField 文本字段，值为 datetime.datetime 格式
IntegerField 文本字段，值为整数
DecimalField 文本字段，值为 decimal.Decimal
FloatField 文本字段，值为浮点数
BooleanField 复选框，值为 True 和 False
RadioField 一组单选框
SelectField 下拉列表
SelectMultipleField 下拉列表，可选择多个值
FileField 文件上传字段
SubmitField 表单提交按钮
FormField 把表单作为字段嵌入另一个表单
FieldList 一组指定类型的字段
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
八、常见的验证函数
验证函数 说　　明
Email 验证电子邮件地址
EqualTo 比较两个字段的值；常用于要求输入两次密码进行确认的情况
IPAddress 验证 IPv4 网络地址
Length 验证输入字符串的长度
NumberRange 验证输入的值在数字范围内
Optional 无输入值时跳过其他验证函数
Required 确保字段中有数据
Regexp 使用正则表达式验证输入值
URL 验证 URL
AnyOf 确保输入值在可选值列表中
NoneOf 确保输入值不在可选值列表中
'''

flask  跨域问题
pip install flask-cors

from flask_cors import *

app = Flask(__name__)
CORS(app, supports_credentials=True)


命令行输入菜单模式
pip install tty_menu

'''
from tty_menu import tty_menu

l = ['a', 'b', 'c']
pos = tty_menu(l, "What is your word?")

print("Your word is %s" % (l[pos]))
'''

Flask-Markdown markdown 渲染
pip install Flask-Markdown
https://pythonhosted.org/Flask-Markdown/

Markdown  处理
pip install Markdown
pip install markdown

#密码输入使用
import getpass
a = getpass.getpass('input passwd:')

#linux 环境下使用
import sys, tty, termios
https://www.cnblogs.com/Richardzhu/p/5162289.html

Dramatiq 是一个 Python 3 （3.5或更高版本）分布式任务处理库
https://www.oschina.net/p/Dramatiq


# pip --help

Usage:
  pip <command> [options]

Commands:
  install                     安装包.
  uninstall                   卸载包.
  freeze                      按着一定格式输出已安装包列表
  list                        列出已安装包.
  show                        显示包详细信息.
  search                      搜索包，类似yum里的search.
  wheel                       Build wheels from your requirements.
  zip                         不推荐. Zip individual packages.
  unzip                       不推荐. Unzip individual packages.
  bundle                      不推荐. Create pybundles.
  help                        当前帮助.

General Options:
  -h, --help                  显示帮助.
  -v, --verbose               更多的输出，最多可以使用3次
  -V, --version               现实版本信息然后退出.
  -q, --quiet                 最少的输出.
  --log-file <path>           覆盖的方式记录verbose错误日志，默认文件：/root/.pip/pip.log
  --log <path>                不覆盖记录verbose输出的日志.
  --proxy <proxy>             Specify a proxy in the form [user:passwd@]proxy.server:port.
  --timeout <sec>             连接超时时间 (默认15秒).
  --exists-action <action>    Default action when a path already exists: (s)witch, (i)gnore, (w)ipe, (b)ackup.
  --cert <path>               证书.



inspect python 模块内容检测模块
'''
inspect.signature（fn)将返回一个inspect.Signature类型的对象，值为fn这个函数的所有参数

inspect.Signature对象的paramerters属性是一个mappingproxy（映射）类型的对象，值为一个有序字典（Orderdict)。

这个字典里的key是即为参数名，str类型

这个字典里的value是一个inspect.Parameter类型的对象，根据我的理解，这个对象里包含的一个参数的各种信息

inspect.Parameter对象的kind属性是一个_ParameterKind枚举类型的对象，值为这个参数的类型（可变参数，关键词参数，etc）

inspect.Parameter对象的default属性：如果这个参数有默认值，即返回这个默认值，如果没有，返回一个inspect._empty类。
'''