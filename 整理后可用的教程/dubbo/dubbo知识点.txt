Dubbo是一个分布式服务框架，致力于提供高性能和透明化的RPC远程服务调用方案，以及SOA服务治理方案

https://dubbo.gitbooks.io/dubbo-user-book/
扩展说明
https://dubbo.gitbooks.io/dubbo-dev-book/

其核心部分包含:
1. 远程通讯: 提供对多种基于长连接的NIO框架抽象封装，包括多种线程模型，序列化，以及“请求-响应”模式的信息交换方式。
2. 集群容错: 提供基于接口方法的透明远程过程调用，包括多协议支持，以及软负载均衡，失败容错，地址路由，动态配置等集群支持。
3. 自动发现: 基于注册中心目录服务，使服务消费方能动态的查找服务提供方，使地址透明，使服务提供方可以平滑增加或减少机器。

节点角色说明：
       Provider: 暴露服务的服务提供方。
       Consumer: 调用远程服务的服务消费方。
       Registry: 服务注册与发现的注册中心。
       Monitor: 统计服务的调用次调和调用时间的监控中心。
       Container: 服务运行容器。

调用关系说明：
0 服务容器负责启动，加载，运行服务提供者。
1. 服务提供者在启动时，向注册中心注册自己提供的服务。
2. 服务消费者在启动时，向注册中心订阅自己所需的服务。
3. 注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。
4. 服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。
5. 服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。


开源的Dubbo的服务管理控制台是阿里巴巴内部裁剪版本，开源部分主要包含：路由规则/动态配置/服务降级/访问控制/权重调整/负载均衡等管理功能。
配置
dubbo.registry.address=zookeeper://127.0.0.1:2181
dubbo.admin.root.password=root
dubbo.admin.guest.password=guest

Dubbo-Monitor主要用来统计服务的调用次数和调用时间，服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心，监控中心则使用数据绘制图表来显示。
服务消费方和提供方需要显示开启Monitor。


并发控制
actives参数
	CONSUMER端配置, ActiveLimitFilter里， count.wait(remain); 线程wait方式,  配合 timeout 配置,   需要配置 actives 参数才会开启 ActiveLimitFilter，应该是为了性能考虑
executes参数
	PROVIDER端配置，ExecuteLimitFilter里，信号量的方式，限制方法级别的并发调用
如果要统计调用数呢?
	RpcStatus.SERVICE_STATISTICS 记录了service级别的计数
	RpcStatus.METHOD_STATISTICS 记录了method级别的计数
	需要配置 executes 参数才会开启 ExecuteLimitFilter，应该是为了性能考虑
	todo: Semaphore.tryAcquire(), 并没有使用 tryAcquire(long timeout, TimeUnit unit) ，超时怎么控制

连接控制
服务端配置 accepts参数
客户端配置 connections 参数

1. 并发控制和连接控制只需要配置1种就好，并发控制较好一些
2. 并发控制配置时注意cluster的配置


参数名	作用范围	默认值	说明	备注
------- ------- ------- ------- ------- -------
actives	consumer	0	每服务消费者每服务每方法最大并发调用数	0表示不限制
connections	consumer	 	对每个提供者的最大连接数，rmi、http、hessian等短连接协议表示限制连接数，dubbo等长连接协表示建立的长连接个数	dubbo时为1，及复用单链接
accepts	provider	0	服务提供方最大可接受连接数	0表示不限制
iothreads	provider	cpu个数+1	io线程池大小(固定大小)	 
threads	provider	200	业务线程池大小(固定大小)	 
executes	provider	0	服务提供者每服务每方法最大可并行执行请求数	0表示不限制
tps	provider	 	指定时间内（默认60s）最大的可执行次数，注意与executes的区别
------- ------- ------- ------- ------- -------





zookeeper中存储的dubbo数据分三级
------- ------- ------- ------- ------- -------
序号	节点			说明
1	根节点		dubbo
2	一级子节点		提供服务的服务名
3	二级子节点		固定的四个子节点：分别为：consumers、configurators、routers、providers
------- ------- ------- ------- ------- -------

Consumers
  存储服务消费者信息
------- ------- ------- ------- ------- -------
属性			描述
application	应用名
category	类型
check		检查
dubbo		dubbo版本
interface	接口名称
methods		接口方法名
pid			进程号
side		消费端或服务端
timestamp	时间戳
------- ------- ------- ------- ------- -------

Providers
  存储服务提供者
------- ------- ------- ------- ------- -------
属性		描述
anyhost	true
application	应用名
dubbo	dubbo版本
interface	接口名称
methods	接口方法名
pid		进程号
side	消费端或服务端
timestamp	时间戳
------- ------- ------- ------- ------- -------

Routers
  路由规则
/dubbo/com.example.dubbo.service.CityService/routers/route://0.0.0.0/com.example.dubbo.service.CityService?category=routers&dynamic=false&enabled=true&force=true&name=com.example.dubbo.service.CityService+blackwhitelist&priority=0&router=condition&rule=consumer.host=192.168.198.1=>false&runtime=false
------- ------- ------- ------- ------- -------
属性			描述
Category	类型
Dynamic		是否动态调整，false表示需要手动调整
Enabled		是否启动
Force		是否强制，false表示，如果没有匹配到则调用其它可调用的服务
Name		路由名称
Priority	优先级
Router		condition符合条件则路由
------- ------- ------- ------- ------- -------

Configrators
  负载均衡和权重信息
负载均衡
/dubbo/com.example.dubbo.service.CityService/configurators/override://0.0.0.0/com.example.dubbo.service.CityService?category=configurators&dynamic=false&enabled=true&loadbalance=random
------- ------- ------- ------- ------- -------
属性			描述
Category	类型
Dynamic		是否动态调整，false表示需要手动调整
Enabled		是否启动
Loadbalance	负载均衡策略
------- ------- ------- ------- ------- -------
权重
/dubbo/com.example.dubbo.service.CityService/configurators/override://192.168.198.1:20880/com.example.dubbo.service.CityService?category=configurators&dynamic=false&enabled=true&weight=200
------- ------- ------- ------- ------- -------
属性			描述
Category	类型
Dynamic		是否动态调整，false表示需要手动调整
Enabled		是否启动
Weight		权重
------- ------- ------- ------- ------- -------


使用路由规则灰度发布
 Router在应用隔离,读写分离,灰度发布中都发挥作用。


Flurry: 基于Dubbo服务的高性能、异步、流式网关



