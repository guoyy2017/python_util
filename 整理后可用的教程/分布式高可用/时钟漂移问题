Java时钟
《《《《《《《《《》》》》》》》》》》》
挂钟
System.currentTimeMillis() 
时钟不是单调的
挂钟时间，如果我们调整它，挂钟也可以及时跳回来
《《《《《《《《《》》》》》》》》》》》
System.nanoTime()
这个时钟返回的时间与任何现实世界的时间无关
纳米时间确实是单调的，但只有底层操作系统支持它

《《《《《《《《《》》》》》》》》》》》
NTP
网络时间协议（NTP）。NTP不仅有助于同步时钟，还有助于传播闰秒标志
《《《《《《《《《》》》》》》》》》》》



唯一ID生成
《《《《《《《《《》》》》》》》》》》》
把64-bit分别划分成多段，分开来标识序列号，工作机器和时间戳等
1位标识，由于long基本类型在Java中是带符号的，最高位是符号位，正数是0，负数是1，所以id一般是正数，最高位是0
41位时间截(毫秒级)，注意，41位时间截不是存储当前时间的时间截，而是存储时间截的差值（当前时间截 - 开始时间截) 得到的值），这里的开始时间截，一般是我们的id生成器开始使用的时间。41位的时间截，可以使用69年，年T = (1L << 41) / (1000L * 60 * 60 * 24 * 365) = 69
10位的数据机器位，可以部署在1024个节点，包括5位datacenterId和5位workerId。
12位序列，毫秒内的计数，12位的计数顺序号支持每个节点每毫秒(同一机器，同一时间截)产生4096个ID序号。理论上snowflake方案的QPS约为409.6w/s。

雪花算法的优点就是基本有序性和高性能，缺点就是时钟回拨，会产生重复的ID。
《《《《《《《《《》》》》》》》》》》》
Leaf算法，leaf算计就是在一定程度上解决了数据库和雪花算法的问题。
Leaf-snowflake方案完全沿用snowflake方案的bit位设计，通过写zk来校验时钟是否回拨，解决时钟回拨问题
UID-generator是百度的开源ID生成算法。 采用RingBuffer来缓存已生成的UID, 最终单机QPS可达600万。
通过消费未来时间克服了雪花算法的并发限制

UidGenerator有两种方式提供：和DefaultUidGenerator和CachedUidGenerator
synchronized保证线程安全；
如果时间有任何的回拨，那么直接抛出异常；
如果当前时间和上一次是同一秒时间，那么sequence自增。如果同一秒内自增值超过2^13-1，那么就会自旋等待下一秒（getNextSecond）；
如果是新的一秒，那么sequence重新从0开始；

CachedUidGenerator在初始化时除了给workerId赋值，还会初始化RingBuffer。



百度唯一ID算法
https://github.com/baidu/uid-generator

