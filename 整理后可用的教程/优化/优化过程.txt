OS 诊断过程
==========================================
OS 的诊断主要关注的是 CPU、Memory、I/O 三个方面

CPU 诊断
------------------------------------------
使用top、vmstat、ps等命令查看系统的cpu使用率
通过us（用户进程所占的%）这个数据来看异常的进程信息。
当us接近100%甚至更高时，可以确定是cpu繁忙造成的响应缓慢

cpu繁忙的原因
..........................................
线程中有无限空循环、无阻塞、正则匹配或者单纯的计算
发生了频繁的gc
多线程的上下文切换

CPU 主要关注平均负载（Load Average），CPU 使用率，上下文切换次数（Context Switch）

..........................................
top 命令可以查看系统平均负载和 CPU 使用率
top -H -p [pid]
平均负载有三个数字：63.66，58.39，57.18，分别表示过去 1 分钟、5 分钟、15 分钟机器的负载
按照经验，若数值小于 0.7*CPU 个数，则系统工作正常；
若超过这个值，甚至达到 CPU 核数的四五倍，则系统的负载就明显偏高

..........................................
jstack来打印出异常进程的堆栈信息
jstack [pid]

top -p [processId] 查看线程耗费
ps -Le来显示所有进程,包括LWP的资源耗费信息

jstack的输出文件中查找对应的lwp的id即可以定位到相应的堆栈信息
线程的状态：RUNNABLE、WAITING等。
对于Runnable的进程需要注意是否有耗费cpu的计算。
对于Waiting的线程一般是锁的等待操作

jstat来查看对应进程的gc信息，以判断是否是gc造成了cpu繁忙。
jstat -gcutil [pid]

..........................................
通过vmstat，通过观察内核状态的上下文切换(cs)次数
vmstat 1 5
上下文切换次数发生的场景主要有如下几种：
1）时间片用完，CPU 正常调度下一个任务；
2）被其它优先级更高的任务抢占；
3）执行任务碰到 I/O 阻塞，挂起当前任务，切换到下一个任务；
4）用户代码主动挂起当前任务让出 CPU；
5）多任务抢占资源，由于没有抢到被挂起；
6）硬件中断

jit引起一些cpu飚高的情形，如大量方法编译等。
这里可以使用-XX:+PrintCompilation这个参数输出jit编译情况，以排查jit编译引起的cpu问题

内存诊断
------------------------------------------
 free –m 命令查看内存的使用情况
 使用交换分区过大会影响 Java 应用性能，可以将 swappiness 值调到尽可能小

..........................................
 Java应用来说，内存主要是由堆外内存和堆内内存组成

堆外内存
堆外内存主要是JNI、Deflater/Inflater、DirectByteBuffer（nio中会用到）使用的
通过vmstat、sar、top、pidstat(这里的sar,pidstat以及iostat都是sysstat软件套件
查看swap和物理内存的消耗状况再做判断的
JNI、Deflater这种调用可以通过Google-preftools来追踪资源使用状况

堆内内存
创建的对象：这个是存储在堆中的，需要控制好对象的数量和大小，尤其是大的对象很容易进入老年代
全局集合：全局集合通常是生命周期比较长的，因此需要特别注意全局集合的使用
缓存：缓存选用的数据结构不同，会很大程序影响内存的大小和gc
ClassLoader：主要是动态加载类容易造成永久代内存不足
多线程：线程分配会占用本地内存，过多的线程也会造成内存不足

------->>>>>>>>>>>>
频繁GC -> Stop the world，使你的应用响应变慢
OOM，直接造成内存溢出错误使得程序退出。OOM又可以分为以下几种：
Heap space：堆内存不足
PermGen space：永久代内存不足
Native thread：本地线程没有足够内存可分配

排查堆内存问题的常用工具是jmap
查看jvm内存使用状况：jmap -heap
查看jvm内存存活的对象：jmap -histo:live
把heap里所有对象都dump下来，无论对象是死是活：jmap -dump:format=b,file=xxx.hprof
先做一次full GC，再dump，只包含仍然存活的对象信息：jmap -dump:format=b,live,file=xxx.hprof

dump文件，可以使用Eclipse的MAT(MEMORY ANALYZER TOOL)来分析，可以看到具体的堆栈和内存中对象的信息。当然jdk自带的jhat也能够查看dump文件(启动web端口供开发者使用浏览器浏览堆内对象的信息)。此外，VisualVM也能够打开hprof文件，使用它的heap walker查看堆内存信息

I/O诊断
------------------------------------------
I/O 包括磁盘 I/O 和网络 I/O，一般情况下磁盘更容易出现 I/O 瓶颈。通过 iostat 可以查看磁盘的读写情况，通过 CPU 的 I/O wait 可以看出磁盘 I/O 是否正常。如果磁盘 I/O 一直处于很高的状态，说明磁盘太慢或故障，成为了性能瓶颈，需要进行应用优化或者磁盘更换

文件IO
可以使用系统工具pidstat、iostat、vmstat来查看io的状况
bi和bo这两个值，分别表示块设备每秒接收的块数量和块设备每秒发送的块数量
使用strace工具定位对文件io的系统调用

造成文件io性能差的原因
------->>>>>>>>>>>>
大量的随机读写
设备慢
文件太大

网络IO
查看网络io状况，一般使用的是netstat工具
当time_wait或者close_wait连接过多时，会影响应用的相应速度

使用tcpdump来具体分析网络io的数据
使用wireshark阅读具体的连接以及其中数据的内容

查看/proc/interrupts来获取当前系统使用的中断的情况

诊断工具
------------------
top、 ps、vmstat、iostat 等命令，还有其他 Linux 工具可以诊断系统问题，如 mpstat、tcpdump、netstat、pidstat、sar 





JAVA 诊断过程
====================================================

jstack
----------------------------------------------------
jstack 命令通常配合 top 使用，通过 top -H -p pid 定位 Java 进程和线程，再利用 jstack -l pid 导出线程栈。由于线程栈是瞬态的，因此需要多次 dump，一般 3 次 dump，一般每次隔 5s 就行。将 top 定位的 Java 线程 pid 转成 16 进制，得到 Java 线程栈中的 nid，可以找到对应的问题线程栈。

JProfiler
----------------------------------------------------
JProfiler 可对 CPU、堆、内存进行分析，功能强大，如下图所示。同时结合压测工具，可以对代码耗时采样统计

GC 诊断
----------------------------------------------------
有 jstat、jmap，还有第三方工具 MAT

jstat
jstat 命令可打印 GC 详细信息，Young GC 和 Full GC 次数，堆信息等。其命令格式为
jstat –gcxxx -t pid ，如下图所示

jmap
jmap 打印 Java 进程堆信息 jmap –heap pid。通过 jmap –dump:file=xxx pid 可 dump 堆到文件，然后通过其它工具进一步分析其堆使用情况

MAT
MAT 是 Java 堆的分析利器，提供了直观的诊断报告，内置的 OQL 允许对堆进行类 SQL 查询，功能强大，outgoing reference 和 incoming reference 可以对对象引用追根溯源
MAT 有两列显示对象大小，分别是 Shallow size 和 Retained size，前者表示对象本身占用内存的大小，不包含其引用的对象，后者是对象自己及其直接或间接引用的对象的 Shallow size 之和，即该对象被回收后 GC 释放的内存大小，一般说来关注后者大小即可

为了诊断 GC 问题，建议在 JVM 参数中加上-XX:+PrintGCDateStamps

工具
-----------------------
VisualVM  Java Mission Control(jmc)  Btrace   Jwebap



调优
======================================================
CPU调优
不要存在一直运行的线程(无限while循环)，可以使用sleep休眠一段时间
使用线程池，减少线程数以及线程的切换

内存调优
内存的调优主要就是对jvm的调优
合理设置各个代的大小。避免新生代设置过小(不够用，经常minor gc并进入老年代)以及过大(会产生碎片)，同样也要避免Survivor设置过大和过小
选择合适的GC策略。需要根据不同的场景选择合适的gc策略。
jvm启动参数配置-XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:[log_path]，以记录gc日志，便于排查问题









