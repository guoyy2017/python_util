zookeepr java 客户端
curator 封装解决zookeeper调用复杂问题
<dependency>
    <groupId>org.apache.curator</groupId>
    <artifactId>curator-framework</artifactId>
    <version>2.12.0</version>
</dependency>
<dependency>
    <groupId>org.apache.curator</groupId>
    <artifactId>curator-recipes</artifactId>
    <version>2.12.0</version>
</dependency>
使用教程地址
https://www.jianshu.com/p/70151fc0ef5d

zookeeper 操作 基本客户端地址
<!-- https://mvnrepository.com/artifact/org.apache.zookeeper/zookeeper -->
<dependency>
    <groupId>org.apache.zookeeper</groupId>
    <artifactId>zookeeper</artifactId>
    <version>3.4.13</version>
</dependency>


zookeeper 安装教程
下载地址
http://apache.fayea.com/zookeeper/zookeeper-3.4.13/zookeeper-3.4.13.tar.gz

zookeeper要求Java运行环境，并且需要jdk版本1.6以上。
单机模式
配置文件 zoo.cfg
tickTime : 服务器与客户端之间交互的基本时间单元（ms）
dataDir : 保存zookeeper数据路径
dataLogDir : 保存zookeeper日志路径，当此配置不存在时默认路径与dataDir一致
clientPort : 客户端访问zookeeper时经过服务器端时的端口号

集群模式
配置文件 zoo.cfg
initLimit : 此配置表示允许follower连接并同步到leader的初始化时间，它以tickTime的倍数来表示。当超过设置倍数的tickTime时间，则连接失败。
syncLimit : Leader服务器与follower服务器之间信息同步允许的最大时间间隔，如果超过次间隔，默认follower服务器与leader服务器之间断开链接。
maxClientCnxns : 限制连接到zookeeper服务器客户端的数量
server.id=host:port:port : 表示了不同的zookeeper服务器的自身标识，作为集群的一部分，每一台服务器应该知道其他服务器的信息。用户可以从“server.id=host:port:port” 中读取到相关信息。在服务器的data(dataDir参数所指定的目录)下创建一个文件名为myid的文件，这个文件的内容只有一行，指定的是自身的id值。比如，服务器“1”应该在myid文件中写入“1”。这个id必须在集群环境中服务器标识中是唯一的，且大小在1～255之间。这一样配置中，zoo1代表第一台服务器的IP地址。第一个端口号（port）是从follower连接到leader机器的端口，第二个端口是用来进行leader选举时所用的端口。所以，在集群配置过程中有三个非常重要的端口：clientPort：2181、port:2888、port:3888。

伪集群模式
单机部署多个实例

启动模式：
zkServer.sh start
查看状态 zkServer.sh status



=============================================================================
JAVA 教程

=============================================================================


java 客户端 curator
<!-- https://mvnrepository.com/artifact/org.apache.curator/curator-framework -->
<dependency>
    <groupId>org.apache.curator</groupId>
    <artifactId>curator-framework</artifactId>
    <version>4.2.0</version>
</dependency>

高级特性
<!-- https://mvnrepository.com/artifact/org.apache.curator/curator-recipes -->
<dependency>
    <groupId>org.apache.curator</groupId>
    <artifactId>curator-recipes</artifactId>
    <version>4.2.0</version>
</dependency>

curator-client组件可以作为zookeeper client来使用
<!-- https://mvnrepository.com/artifact/org.apache.curator/curator-client -->
<dependency>
    <groupId>org.apache.curator</groupId>
    <artifactId>curator-client</artifactId>
    <version>4.2.0</version>
</dependency>

curator-framework：对zookeeper的底层api的一些封装
curator-client：提供一些客户端的操作，例如重试策略等
curator-recipes：封装了一些高级特性，如：Cache事件监听、选举、分布式锁、分布式计数器、分布式Barrier等



=============================================================================
JAVA 教程 https://blog.csdn.net/u010889616/article/details/80209629
String connectString = "127.0.0.1:2181";
//创建连接 配置下重试策略
RetryPolicy policy = new ExponentialBackoffRetry(1000, 3);
CuratorFramework curator = CuratorFrameworkFactory.builder()
        .retryPolicy(policy)
        .connectString(connectString).build();
//开启连接
curator.start();

----------连接参数----------
连接参数
参数名
说明
connectionString
服务器列表，格式host1:port1,host2:port2,...
retryPolicy
重试策略,内建有四种重试策略,也可以自行实现RetryPolicy接口
sessionTimeoutMs
会话超时时间，单位毫秒，默认60000ms
connectionTimeoutMs
连接创建超时时间，单位毫秒，默认60000ms

独立命名空间为“/base”  namespace("base")
---------连接参数-----------

---------------------------
Zookeeper的节点创建模式：
PERSISTENT：持久化
PERSISTENT_SEQUENTIAL：持久化并且带序列号
EPHEMERAL：临时
EPHEMERAL_SEQUENTIAL：临时并且带序列号
---------------------------

//分布式锁
InterProcessMutex lock = new InterProcessMutex(curator, "/sync/lock");
//使用
lock.acquire();
//释放
lock.release();

-------------------------------------------------API 说明-----------------------------------------------------
API 说明
方法名	描述
create()		开始创建操作， 可以调用额外的方法(比如方式mode 或者后台执行background) 并在最后调用forPath()指定要操作的ZNode
delete()	开始删除操作. 可以调用额外的方法(版本或者后台处理version or background)并在最后调用forPath()指定要操作的ZNode
checkExists()	开始检查ZNode是否存在的操作. 可以调用额外的方法(监控或者后台处理)并在最后调用forPath()指定要操作的ZNode
getData()
开始获得ZNode节点数据的操作. 可以调用额外的方法(监控、后台处理或者获取状态watch, background or get stat) 

并在最后调用forPath()指定要操作的ZNode

setData()	开始设置ZNode节点数据的操作. 可以调用额外的方法(版本或者后台处理) 并在最后调用forPath()指定要操作的ZNode
getChildren()
开始获得ZNode的子节点列表。 以调用额外的方法(监控、后台处理或者获取状态watch, background or get stat) 

并在最后调用forPath()指定要操作的ZNode

inTransaction()	开始是原子ZooKeeper事务. 可以复合create, setData, check, and/or delete 等操作然后调用commit()作为一个原子操作提交
-------------------------------------------------API 说明-----------------------------------------------------

特殊操作参数
https://www.jianshu.com/p/70151fc0ef5d
creatingParentContainersIfNeeded()接口
使用creatingParentContainersIfNeeded()之后Curator能够自动递归创建所有所需的父节点


重连配置
RetryPolicy接口: 重连策略,当zookeeper失去链接时使用的"重连策略":
<> RetryOneTime: 只重连一次.
<> RetryNTime: 指定重连的次数N.
<> RetryUtilElapsed: 指定最大重连超时时间和重连时间间隔,间歇性重连直到超时或者链接成功.
<> ExponentialBackoffRetry: 基于"backoff"方式重连,和RetryUtilElapsed的区别是重连的时间间隔是动态的.
<> BoundedExponentialBackoffRetry: 同ExponentialBackoffRetry,增加了最大重试次数的控制.


-------------------功能---------------------
选举
Curator提供两种方式实现选举：LeaderSelector 和 LeaderLatch
LeaderLatch语法较为简单一点，LeaderSelector控制度更高一些


分布式锁
Curator提供了InterProcessMutex类来帮助我们实现分布式锁
使用的EPHEMERAL_SEQUENTIAL类型节点
acquire()方法，会在给定的路径下面创建临时时序节点的时序节点
release()方法就是释放锁，内部实现就是删除创建的EPHEMERAL_SEQUENTIAL节点
=============================================================================

