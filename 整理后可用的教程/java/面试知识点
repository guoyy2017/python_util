面试知识点
https://blog.csdn.net/qq_35151346/article/details/90740508

刷题编码
https://leetcode-cn.com/

一致性哈希-哈希环-数据倾斜(虚拟节点，多次hash)-Redis 集群哈希槽(crc16校验算法)
https://www.jianshu.com/p/735a3d4789fc


分布式事务

大事务=小事务（原子事务）+异步（消息通知）
解决分布式事务的最好办法其实就是不考虑分布式事务


Spring Boot + Mybatis + DynamicDataSource配置动态双数据源
https://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw==&mid=2247486113&idx=2&sn=10febe8f38ef16e4b91328f45c6f4539&chksm=eb538f97dc240681755ef8d41d401cb3577f6695369030fdd464bb6e036b64663e581b895d2f&scene=21#wechat_redirect
注解加切面，实现动态数据源操作



STOMP即Simple (or Streaming) Text Orientated Messaging Protocol，简单(流)文本定向消息协议


内存缓存jar 基于java8
caffeine
https://www.cnblogs.com/liujinhua306/p/9808500.html


异步操作框架reactor框架
Vert.x


热部署神器-JRebel

一般用谷歌guava落地令牌桶算法，用sentinel作为服务限流的中间件


跳跃表（Skip list）


Schedulerx2.0 分布式引擎


Rabbitmq 消息的消费模式分Push、Pull两种
Kafka 支持批量消费消息
ActiveMQ 可java内嵌，可配置持久化(两种模式1.AMQ：基于文件存储2.KahaDB消息存储-提供了容量的提升和恢复能力)，可批量消息
<dependency>
    <groupId>org.apache.activemq</groupId>
    <artifactId>activemq-all</artifactId>
    <version>5.14.5</version>
</dependency>

jeromq  Pure Java ZeroMQ
https://github.com/zeromq/jeromq
ZeroMQ将消息通信分成4种模型，分别是一对一结对模型（Exclusive-Pair）、请求回应模型（Request-Reply）、发布订阅模型（Publish-Subscribe）、推拉模型（Push-Pull）	

LevelDB
具有很高的随机写，顺序读/写性能，但是随机读的性能很一般，也就是说，LevelDB很适合应用在查询较少，而写很多的场景
Mapdb
mapdb是一个嵌入式java数据库引擎，主要提供map和set形式的数据存储
新版本kotlin
<!-- https://mvnrepository.com/artifact/org.mapdb/mapdb -->
<dependency>
    <groupId>org.mapdb</groupId>
    <artifactId>mapdb</artifactId>
    <version>3.0.8</version>
</dependency>
老版本java语言
<!-- https://mvnrepository.com/artifact/org.mapdb/mapdb -->
<dependency>
    <groupId>org.mapdb</groupId>
    <artifactId>mapdb</artifactId>
    <version>1.0.9</version>
</dependency>


时间轮 HashedWheelTimer
https://www.jianshu.com/p/328f22432638

java 延时队列DelayQueue

java 操作sqlite
<!-- https://mvnrepository.com/artifact/sqlite/sqlitejdbc -->
<dependency>
    <groupId>sqlite</groupId>
    <artifactId>sqlitejdbc</artifactId>
    <version>0.56.0</version>
</dependency>
-- 另一个jar库
<!-- https://mvnrepository.com/artifact/org.xerial/sqlite-jdbc -->
<dependency>
    <groupId>org.xerial</groupId>
    <artifactId>sqlite-jdbc</artifactId>
    <version>3.30.1</version>
</dependency>

Http-server是一个轻量级的基于nodejs的http服务器，它最大好处就是
npm i -g http-server
http-server
若要禁用缓存，请使用如下命令运行
http-server -c-1

python -m http.server

抓包工具
tshark 是 Wireshark 命令行版本
tcpdump 抓包工具命令行
yum install tcpdump -y
ngrep 抓包工具
pcapsipdump 抓包工具 针对sip抓包工具


穿透NAT打洞

java 熔断框架
https://github.com/alibaba/Sentinel

JMH是 JDK9自带的，如果你是 JDK9 之前的版本也可以通过导入 openjdk
<dependency>
    <groupId>org.openjdk.jmh</groupId>
    <artifactId>jmh-core</artifactId>
    <version>1.19</version>
</dependency>
<dependency>
    <groupId>org.openjdk.jmh</groupId>
    <artifactId>jmh-generator-annprocess</artifactId>
    <version>1.19</version>
</dependency>

linux 实用命令
socket 服务 netcat(nc)

Thumbnailator 是一个为Java界面更流畅的缩略图生成库
<!-- https://mvnrepository.com/artifact/net.coobird/thumbnailator -->
<dependency>
<groupId>net.coobird</groupId>
<artifactId>thumbnailator</artifactId>
<version>0.4.8</version>
</dependency>



java xmlrpc
apache XmlRpcClient

<dependency>
	      <groupId>org.apache.xmlrpc</groupId>
	      <artifactId>xmlrpc-client</artifactId>
	      <version>3.1.3</version>
	    </dependency> 

XML-RPC2 服务端
<dependency>
    <groupId>xmlrpc</groupId>
	<artifactId>xmlrpc</artifactId>
	<version>2.0.1</version>
</dependency>


RxJava  将链式编程风格和异步结合在一起
观察者模式
RxJava是支持异步的


Trie 树，即字典树，又称单词查找树或键树，是一种树形结构

GSON来操作java对象和json数据之间的相互转换
https://www.jianshu.com/p/75a50aa0cad1


日志收集分析工具
Logstash+Elasticsearch+Kibana（ELK）
Logstash：监控，过滤，收集日志。
Elasticsearch：存储日志,提供搜索功能。
kibana：提供web界面，支持查询，统计，和图表展现。
filebeat：轻量级的日志收集工具。
在应用端收集日志时，建议用filebeat
架构设计
　　（1）使用filebeat
　　　　架构设计1：filebeat(1.3)-->logstash(parse)-->es集群-->kibana--ngix
　　　　　　  缺点：如果logstash出问题会导致filebeat收集的数据丢失
　　　　架构设计2：filebeat(1.3)-->logstash(parse)[loadbalance]-->es集群-->kibana--ngix
　　　　　　filebeat和>logstash耦合性太高
　　　　架构设计3：filebeat(1.3)（3台）-->redis-->logstash(parse)-->es集群-->kibana--ngix（可选）  （我这里，目前为了学习，走这条线路）
　　　　　　里面redis是一个单线程的实例，redis单线程每秒处理能力一般是10W次左右。
　　　　架构设计4：filebeat(5.0)-->redis/kafka-->logstash(parse)-->es-->kibana--ngix
　　　　　　filebeat(1.3)不支持输出到kafka，5.x版本中支持输出到kafka
　　（2）不使用filebeat
　　　　　　logstash-->kafka-->logstash(parse)-->es-->kibana--ngix
　　　　　　　　里面kafka支持水平扩展，可以使用多分区，支持多线程并行执行。
　　　　　　　　在应用端收集日志的话，logstash比较重量级，性能消耗比filebeat大
　　（3）Filebeat用于日志收集和传输，相比Logstash更加轻量级和易部署，对系统资源开销更小。


人人产品经理
http://www.woshipm.com/

NLP 标准工具 doccano
http://doccano.herokuapp.com/
https://github.com/doccano/doccano


java 读取文件问题
首先，Java中的getResourceAsStream有以下几种： 
1. Class.getResourceAsStream(String path) ： path 不以’/'开头时默认是从此类所在的包下取资源，以’/'开头则是从ClassPath根下获取。其只是通过path构造一个绝对路径，最终还是由ClassLoader获取资源。 

2. Class.getClassLoader.getResourceAsStream(String path) ：默认则是从ClassPath根下获取，path不能以’/'开头，最终是由ClassLoader获取资源。 

3. ServletContext. getResourceAsStream(String path)：默认从WebAPP根目录下取资源，Tomcat下path是否以’/'开头无所谓，当然这和具体的容器实现有关。 

4. Jsp下的application内置对象就是上面的ServletContext的一种实现。 

其次，getResourceAsStream 用法大致有以下几种： 

第一： 要加载的文件和.class文件在同一目录下，例如：com.x.y 下有类me.class ,同时有资源文件myfile.xml 

那么，应该有如下代码： 

me.class.getResourceAsStream("myfile.xml"); 

第二：在me.class目录的子目录下，例如：com.x.y 下有类me.class ,同时在 com.x.y.file 目录下有资源文件myfile.xml 

那么，应该有如下代码： 

me.class.getResourceAsStream("file/myfile.xml"); 

第三：不在me.class目录下，也不在子目录下，例如：com.x.y 下有类me.class ,同时在 com.x.file 目录下有资源文件myfile.xml 

那么，应该有如下代码： 

me.class.getResourceAsStream("/com/x/file/myfile.xml"); 

总结一下，可能只是两种写法 

第一：前面有 “   / ” 

“ / ”代表了工程的根目录，例如工程名叫做myproject，“ / ”代表了myproject 

me.class.getResourceAsStream("/com/x/file/myfile.xml"); 

第二：前面没有 “   / ” 

代表当前类的目录 

me.class.getResourceAsStream("myfile.xml"); 

me.class.getResourceAsStream("file/myfile.xml"); 

最后，自己的理解： 
getResourceAsStream读取的文件路径只局限与工程的源文件夹中，包括在工程src根目录下，以及类包里面任何位置，但是如果配置文件路径是在除了源文件夹之外的其他文件夹中时，该方法是用不了的。