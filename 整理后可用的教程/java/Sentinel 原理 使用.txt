下载源码编译  阿里哨兵
https://github.com/alibaba/Sentinel
教程
https://github.com/all4you/sentinel-tutorial

sentinel-core 核心模块，限流、降级、系统保护等都在这里实现
sentinel-dashboard 控制台模块，可以对连接上的sentinel客户端实现可视化的管理
sentinel-transport 传输模块，提供了基本的监控服务端和客户端的API接口，以及一些基于不同库的实现
sentinel-extension 扩展模块，主要对DataSource进行了部分扩展实现
sentinel-adapter 适配器模块，主要实现了对一些常见框架的适配
sentinel-demo 样例模块，可参考怎么使用sentinel进行限流、降级等
sentinel-benchmark 基准测试模块，对核心代码的精确性提供基准测试

执行代码

java -Dserver.port=8333 -Dcsp.sentinel.dashboard.server=localhost:8333 -Dproject.name=sentinel-dashboard -jar sentinel-dashboard-1.4.2.jar
java -Dserver.port=8080 -Dcsp.sentinel.dashboard.server=localhost:8080 -jar target/sentinel-dashboard.jar

sentinel/sentinel

-Dserver.port 指定控制台的端口
-Dcsp.sentinel.dashboard.server 指定控制台的地址，相当于自己注册自己，这样启动后就能看到自身的信息
-Dproject.name 指定接入的应用名称

客户端接入控制台
<dependency>
	<groupId>com.alibaba.csp</groupId>
	<artifactId>sentinel-transport-simple-http</artifactId>
	<version>1.4.1</version>
</dependency>
启动加入
-Dcsp.sentinel.dashboard.server=localhost:8333
-Dcsp.sentinel.api.port=xxxx 指定客户端监控 API 的端口（默认是 8719）

FlowRuleManager.loadRules(List<FlowRule> rules); // 修改流控规则
DegradeRuleManager.loadRules(List<DegradeRule> rules); // 修改降级规则
SystemRuleManager.loadRules(List<SystemRule> rules); // 修改系统规则


集群服务
服务端
独立方式启动的 ClusterTokenServer
客服端
集群客户端指定服务端的 ip 和 port
客户端和服务端之间的通讯中断，那么集群限流将退化成本地限流
每个应用上都加上 -Dcsp.sentinel.log.use.pid=true 的参数

========================================================
先启动好 nacos 服务，并将集群限流规则发布到 nacos 中
启动好 dashboard，版本选择 1.4.1
启动独立模式运行的 token server，并配置与 dashboard 的连接，token server 会自动连接上 dashboard
启动两个 token client，配置与 token server / dashboard 的连接，需模拟一次流量请求，client 才会初始化并连接上 dashboard
通过 jmeter 模拟请求 token client 观察 dashboard 上的实时监控
========================================================

服务端在启动后可以连接上 sentinel-dashboard
-Dproject.name=xxx -Dcsp.sentinel.dashboard.server=consoleIp:port

首先我们引入集群流控服务端所需的相关依赖：
<dependencies>
    <dependency>
        <groupId>com.alibaba.csp</groupId>
        <artifactId>sentinel-transport-simple-http</artifactId>
        <version>1.4.1</version>
    </dependency>
    <dependency>
        <groupId>com.alibaba.csp</groupId>
        <artifactId>sentinel-cluster-server-default</artifactId>
        <version>1.4.1</version>
    </dependency>
    <dependency>
        <groupId>com.alibaba.csp</groupId>
        <artifactId>sentinel-datasource-nacos</artifactId>
        <version>1.4.1</version>
    </dependency>
    <dependency>
        <groupId>org.apache.logging.log4j</groupId>
        <artifactId>log4j-slf4j-impl</artifactId>
        <version>2.9.1</version>
    </dependency>
</dependencies>


热点限流是在 sentinel-extension 模块中定义的
<dependency>
    <groupId>com.alibaba.csp</groupId>
    <artifactId>sentinel-parameter-flow-control</artifactId>
    <version>x.y.z</version>
</dependency>





在 Sentinel 里面，所有的资源都对应一个资源名称以及一个 Entry。Entry 可以通过对主流框架的适配自动创建，也可以通过注解的方式或调用 API 显式创建；每一个 Entry 创建的时候，同时也会创建一系列功能插槽（slot chain）。这些插槽有不同的职责，例如:
NodeSelectorSlot 负责收集资源的路径，并将这些资源的调用路径，以树状结构存储起来，用于根据调用路径来限流降级；
ClusterBuilderSlot 则用于存储资源的统计信息以及调用者信息，例如该资源的 RT, QPS, thread count 等等，这些信息将用作为多维度限流，降级的依据；
StatisticSlot 则用于记录、统计不同纬度的 runtime 指标监控信息；
FlowSlot 则用于根据预设的限流规则以及前面 slot 统计的状态，来进行流量控制；
AuthoritySlot 则根据配置的黑白名单和调用来源信息，来做黑白名单控制；
DegradeSlot 则通过统计信息以及预设的规则，来做熔断降级；
SystemSlot 则通过系统的状态，例如 load1 等，来控制总的入口流量；

一系列的slot都是在
      entry = SphU.entry("HelloWorld");
中创建的，并且是每个资源对应唯一一个slot chain(ProcessorSlotChain)。
ProcessorSlotChain

因为一个资源与对应唯一一个SlotChain，所以在应用中一个资源就唯一对应一个NodeSelectorSlot、ClusterBuilderSlot、LogSlot、StatisticSlot、SystemSlot、AuthoritySlot、FlowSlot、DegradeSlot。


NodeSelectorSlot: 建立树状结构（调用链路）
ClusterBuilderSlot: 根据资源保存统计簇点
StatisticSlot: 实时数据统计
FlowSlot: 流量控制
DegradeSlot: 熔断降级
SystemSlot: 系统负载保护

Sentinel 将 ProcessorSlot 作为 SPI 接口进行扩展（1.7.2 版本以前 SlotChainBuilder 作为 SPI），使得 Slot Chain 具备了扩展的能力。您可以自行加入自定义的 slot 并编排 slot 间的顺序，从而可以给 Sentinel 添加自定义的功能。
ContextUtil.enter() 创建了一个名为 entrance1 的上下文，同时指定调用发起者为 appA


sentinel-cluster-common-default: 公共模块，包含公共接口和实体
sentinel-cluster-client-default: 默认集群流控 client 模块，使用 Netty 进行通信，提供接口方便序列化协议扩展
sentinel-cluster-server-default: 默认集群流控 server 模块，使用 Netty 进行通信，提供接口方便序列化协议扩展；同时提供扩展接口对接规则判断的具体实现（TokenService），默认实现是复用 sentinel-core 的相关逻辑

