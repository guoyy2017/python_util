在redis.conf配置文件中，有两个参数可以优化列表：
list-max-ziplist-size 表示每个quicklistNode的字节大小。默认为-2 表示8KB
list-compress-depth 表示quicklistNode节点是否要压缩。默认是0 表示不压缩
hash-max-ziplist-entries改为1024

include导入另外的配置文件
include /path/to/local.conf

服务器连接到了Internet，则会将Redis暴露给外网导致危险。
bind 127.0.0.1 ::1
配置保护模式，只允许在本机通过TCP或者Unix方式进行登录
protected-mode yes
配置监听的端口号，默认是6379。
如果设置为0，则表示不再监听
port 6379

配置TCP监听的最大容纳数量。
在高并发的环境下，需要把这个值调高以避免客户端连接缓慢的问题。
有时，Linux会一声不响的把值缩小为/proc/sys/net/core/somaxconn的值。
此时对somaxconn与tcp_max_syn_backlog的值进行修改。
tcp-backlog 511

设置Unix访问方式，指定Unix Socket文件路径与权限。
默认没有开启。
unixsocket /tmp/redis.sock
unixsocketperm 700

配置连接超时时间，单位：秒，超时Redis会主动断开连接。
默认配置为：0，表示不会主动断开客户端连接。
timeout 0

配置TCP心跳时间，单位：秒。
tcp-keepalive 300

配置Redis是否以守护进程的方式启动，默认是no。
修改为yes后开启，Redis会将进程号写入/var/run/redis.pid文件中。
daemonize yes





redis 适用场景
======== ======== ======== ======== ======== ========
String，redis对于KV的操作效率很高，可以直接用作计数器。例如，统计在线人数等等，另外string类型是二进制存储安全的，所以也可以使用它来存储图片，甚至是视频等。
hash，存放键值对，一般可以用来存某个对象的基本属性信息，例如，用户信息，商品信息等，另外，由于hash的大小在小于配置的大小的时候使用的是ziplist结构，比较节约内存，所以针对大量的数据存储可以考虑使用hash来分段存储来达到压缩数据量，节约内存的目的，例如，对于大批量的商品对应的图片地址名称。比如：商品编码固定是10位，可以选取前7位做为hash的key,后三位作为field，图片地址作为value。这样每个hash表都不超过999个，只要把redis.conf中的hash-max-ziplist-entries改为1024，即可。
list，列表类型，可以用于实现消息队列，也可以使用它提供的range命令，做分页查询功能。
set，集合，整数的有序列表可以直接使用set。可以用作某些去重功能，例如用户名不能重复等，另外，还可以对集合进行交集，并集操作，来查找某些元素的共同点
zset，有序集合，可以使用范围查找，排行榜功能或者topN功能。
======== ======== ======== ======== ======== ========



redis redis.conf 配置说明
======== ======== ======== ======== ======== ========
配置大小时
1	1k => 1000 bytes
2	1kb => 1024 bytes
3	1m => 1000000 bytes
4	1mb => 1024*1024 bytes

daemonize no 默认情况下，redis不是在后台运行的，如果需要在后台运行，把该项的值更改为yes
pidfile /var/run/redis.pid 当redis在后台运行的时候，Redis默认会把pid文件放在/var/run/redis.pid，你可以配置到其他地址。当运行多个redis服务时，需要指定不同的pid文件和端口
port 6379 指定redis运行的端口
bind 127.0.0.1 指定redis只接收来自于该IP地址的请求，如果不进行设置，那么将处理所有请求，在生产环境中最好设置该项
timeout 300 设置客户端连接时的超时时间，单位为秒。当客户端在这段时间内没有发出任何指令，那么关闭该连接
loglevel debug log等级分为4级，debug, verbose, notice, 和warning。生产环境下一般开启notice
logfile stdout 配置log文件地址，默认使用标准输出，即打印在命令行终端的窗口上
databases 16 设置数据库的个数，可以使用SELECT 命令来切换数据库。默认使用的数据库是 DB 0
save 900 1 设置Redis进行数据库镜像的频率。

1	# after 900 sec (15 min) if at least 1 key changed
2	# after 300 sec (5 min) if at least 10 keys changed
3	# after 60 sec if at least 10000 keys changed

rdbcompression yes 在进行镜像备份时，是否进行压缩
dbfilename dump.rdb 镜像备份文件的文件名
dir /opt/local/var/db/redis/ 数据库镜像备份的文件放置的路径。这里的路径跟文件名要分开配置是因为redis在进行备份时，先会将当前数据库的状态写入到一个临时文件中，等备份完成时，再把该该临时文件替换为上面所指定的文件，而这里的临时文件和上面所配置的备份文件都会放在这个指定的路径当中。
slaveof 设置该数据库为其他数据库的从数据库
masterauth 当主数据库连接需要密码验证时，在这里指定
requirepass foobared 设置客户端连接后进行任何其他指定前需要使用的密码。警告：因为redis速度相当快，所以在一台比较好的服务器下，一个外部的用户可以在一秒钟进行150K次的密码尝试，这意味着你需要指定非常非常强大的密码来防止暴力破解。
maxclients 128 限制同时连接的客户数量。当连接数超过这个值时，redis将不再接收其他连接请求，客户端尝试连接时将收到error信息。
maxmemory 设置redis能够使用的最大内存。当内存满了的时候，如果还接收到set命令，redis将先尝试剔除设置过expire信息的key，而不管该key的过期时间还没有到达。在删除时，将按照过期时间进行删除，最早将要被过期的key将最先被删除。如果带有expire信息的key都删光了，那么将返回错误。这样，redis将不再接收写请求，只接收get请求。maxmemory的设置比较适合于把redis当作于类似memcached的缓存来使用。
appendonly no 默认情况下，redis会在后台异步的把数据库镜像备份到磁盘，但是该备份是非常耗时的，而且备份也不能很频繁，如果发生诸如拉闸限电、拔插头等状况，那么将造成比较大范围的数据丢失。所以redis提供了另外一种更加高效的数据库备份及灾难恢复方式。开启append only模式之后，redis会把所接收到的每一次写操作请求都追加到appendonly.aof文件中，当redis重新启动时，会从该文件恢复出之前的状态。但是这样会造成appendonly.aof文件过大，所以redis还支持了BGREWRITEAOF指令，对appendonly.aof进行重新整理。所以我认为推荐生产环境下的做法为关闭镜像，开启appendonly.aof，同时可以选择在访问较少的时间每天对appendonly.aof进行重写一次。
appendfsync everysec 设置对appendonly.aof文件进行同步的频率。always表示每次有写操作都进行同步，everysec表示对写操作进行累积，每秒同步一次。这个需要根据实际业务场景进行配置
vm-enabled no 是否开启虚拟内存支持。因为redis是一个内存数据库，而且当内存满的时候，无法接收新的写请求，所以在redis 2.0中，提供了虚拟内存的支持。但是需要注意的是，redis中，所有的key都会放在内存中，在内存不够时，只会把value值放入交换区。这样保证了虽然使用虚拟内存，但性能基本不受影响，同时，你需要注意的是你要把vm-max-memory设置到足够来放下你的所有的key
vm-swap-file /tmp/redis.swap 设置虚拟内存的交换文件路径
vm-max-memory 0 这里设置开启虚拟内存之后，redis将使用的最大物理内存的大小。默认为0，redis将把他所有的能放到交换文件的都放到交换文件中，以尽量少的使用物理内存。在生产环境下，需要根据实际情况设置该值，最好不要使用默认的0
vm-page-size 32 设置虚拟内存的页大小，如果你的value值比较大，比如说你要在value中放置博客、新闻之类的所有文章内容，就设大一点，如果要放置的都是很小的内容，那就设小一点。
vm-pages 134217728 设置交换文件的总的page数量，需要注意的是，page table信息会放在物理内存中，每8个page就会占据RAM中的1个byte。总的虚拟内存大小 ＝ vm-page-size * vm-pages
vm-max-threads 4 设置VM IO同时使用的线程数量。因为在进行内存交换时，对数据有编码和解码的过程，所以尽管IO设备在硬件上本上不能支持很多的并发读写，但是还是如果你所保存的vlaue值比较大，将该值设大一些，还是能够提升性能的
glueoutputbuf yes 把小的输出缓存放在一起，以便能够在一个TCP packet中为客户端发送多个响应，具体原理和真实效果我不是很清楚。所以根据注释，你不是很确定的时候就设置成yes
hash-max-zipmap-entries 在redis 2.0中引入了hash数据结构。当hash中包含超过指定元素个数并且最大的元素没有超过临界时，hash将以一种特殊的编码方式（大大减少内存使用）来存储，这里可以设置这两个临界值
activerehashing yes 开启之后，redis将在每100毫秒时使用1毫秒的CPU时间来对redis的hash表进行重新hash，可以降低内存的使用。当你的使用场景中，有非常严格的实时性需要，不能够接受Redis时不时的对请求有2毫秒的延迟的话，把这项配置为no。如果没有这么严格的实时性要求，可以设置为yes，以便能够尽可能快的释放内存
======== ======== ======== ======== ======== ========