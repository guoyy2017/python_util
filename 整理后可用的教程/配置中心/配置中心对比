功能上的对比

   功能上对nacos以及apollo进行了对比，配置中心所需要的基本功能2者都有，总体说apoolo的功能会更加全体一些，我这里就不一一列出，我把各自独有的特点分别举例一下。

 nacos特征：

    1.nacos配置文件支持比较多的格式，支持yaml、text、json、xml、html、Properties，apollo只支持xml、text、Properties的格式，没有兼容springboot中比较通用的yaml配置。（不过笔者认为这点问题不是很大，因为很多在线转换的工具，可以直接把yaml配置文件转换为Properties的格式，在实际使用过程中也不会有任何区别）

   2.集群的部署，nacos的集群部署比较简单，apollo的集群部署较为复杂一些（个人认为部署是一次性的事，功能好用才是比较实在的），吞吐量更加高1下。部署起来非常迅速。

apollo特征：

  1.apollo用户管理以及权限管理做的比较好和全面，适合做部门或者公司级的配置中心。nacos比较简洁明了（也可以说没有做权限这一块的开发），适合做小组内，或者小型java团体使用。

2. apollo区分多环境是直接通过环境指定，可以直接对比和切换，而nacos是通过命名空间进行区分的，个人感觉比较不够直观。

3.nacos是支持多格式的配置文件，但是解析上没有apollo做的好，apollo虽然支持的配置格式较少，不过会进行解析，使每个配置看起来比较直观，修改的时候比较直观，可以对单个进行修改。

4.apollo配置支持继承模式，可以有一个公共的配置，然后再新建不同的项目，可以一起集成这个公共的配置，个人感觉更加适目前项目微服务的形式（nacos找了一下没有看到这个功能，不过个人感觉配置中心没有这个功能非常不合理，可能是我没有扎到，如果有欢迎指正错误）

5.配置对比上：nacos和apollo都有对比功能，不过nacos比较粗糙一些，只能再发布的时候与上一个版本进行对比，apollo支持不同环境 不同版本上的杜比。

6.apollo自带支持开放平台的接口以及能力，可以分享对接配置。