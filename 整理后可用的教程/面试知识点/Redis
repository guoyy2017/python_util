缓存失效策略
过期删除策略
===== ===== ===== ===== ===== ===== ===== =====
定期删除
---- ---- ---- ---- ---- ---- ---- ----
redis会把设置了过期时间的key放在单独的字典中 
每隔一段时间执行一次删除(在redis.conf配置文件设置hz，1s刷新的频率)过期key的操作
---- ---- ---- ---- ---- ---- ---- ----
具体的算法如下:
Redis配置项hz定义了serverCron任务的执行周期，默认为10，即CPU空闲时每秒执行10次;
每次过期key清理的时间不超过CPU时间的25%，即若hz=1，则一次清理时间最大为250ms，若hz=10，则一次清理时间最大为25ms;
清理时依次遍历所有的db;
从db中随机取20个key，判断是否过期，若过期，则逐出;
若有5个以上key过期，则重复步骤4，否则遍历下一个db;
在清理过程中，若达到了25%CPU时间，退出清理过程;
---- ---- ---- ---- ---- ---- ---- ----
由于算法采用的随机取key判断是否过期的方式，故几乎不可能清理完所有的过期Key;
扫描时间上限默认不超过25ms
系统中应避免大量的key同时过期，给要过期的key设置一个随机范围

惰性删除
---- ---- ---- ---- ---- ---- ---- ----
过期的key并不一定会马上删除，还会占用着内存。 当你真正查询这个key时，redis会检查一下，这个设置了过期时间的key是否过期了? 如果过期了就会删除，返回空。这就是惰性删除。

定时删除
---- ---- ---- ---- ---- ---- ---- ----
在设置key的过期时间的同时，为该key创建一个定时器，让定时器在key的过期时间来临时，对key进行删除。
此方法基本上没人用

Redis采用的过期策略
惰性删除+定期删除

内存淘汰策略
noeviction：当内存使用超过配置的时候会返回错误，不会驱逐任何键（默认策略，不建议使用）
allkeys-lru：加入键的时候，如果过限，首先通过LRU算法驱逐最久没有使用的键
volatile-lru：加入键的时候如果过限，首先从设置了过期时间的键集合中驱逐最久没有使用的键（不建议使用）
allkeys-random：加入键的时候如果过限，从所有key随机删除
volatile-random：加入键的时候如果过限，从过期键的集合中随机驱逐（不建议使用）
volatile-ttl：从配置了过期时间的键中驱逐马上就要过期的键
volatile-lfu：从所有配置了过期时间的键中驱逐使用频率最少的键
allkeys-lfu：从所有键中驱逐使用频率最少的键

缓存失效策略
FIFO ，first in first out ，最先进入缓存的数据在缓存空间不够情况下(超出最大元素限制时)会被首先清理出去
LFU ， Less Frequently Used ，一直以来最少被使用的元素会被被清理掉。这就要求缓存的元素有一个hit 属性，在缓存空间不够得情况下,hit 值最小的将会被清出缓存。
LRU ，Least Recently Used ，最近最少使用的，缓存的元素有一个时间戳，当缓存容量满了，而又需要腾出地方来缓存新的元素的时候，那么现有缓存元素中时间戳离当前时间最远的元素将被清出缓存。

Redis事务
WATCH 命令用于在事务开始之前监视任意数量的键： 当调用 EXEC 命令执行事务时， 如果任意一个被监视的键已经被其他客户端修改了， 那么整个事务不再执行， 直接返回失败
Redis 的事务是使用 MULTI-EXEC 的命令组合
开启事务。
命令进入队列。
执行事务
开启事务是 multi 命令
执行事务是 exec 命令
当命令格式正确，而因为操作数据结构引起的错误，则该命令执行出现错误，而其之前和之后的命令都会被正常执行
discard 回滚事务
watch key1 [key2…]  监听某些键，当被监听的键在事务执行前被修改，则事务会被回滚 使用乐观锁
unwatch key1 [key2…] 取消监听某些键
redis的事务处理并不支持回滚
**** **** **** **** **** **** **** ****
Redis的事务并不具有一致性（Consistency）
原子性体现在——要么都运行，要么都不运行。而不是说要么都正确运行，要么都不运行

redis 管道执行(pipline)



Redis读写分离
redis-proxy
redis-proxy会识别出客户端连接发送过来的请求是读还是写，然后按照权重作负载均衡
master默认也提供读，可以通过权重控制


Redis客户短
Redisson中的方法则是进行比较高的抽象，每个方法调用可能进行了一个或多个Redis方法调用
分布式锁，分布式集合，可通过Redis支持延迟队列
Jedis中的方法调用是比较底层的暴露的Redis的API
Lettuce:高级Redis客户端，用于线程安全同步，异步和响应使用，支持集群，Sentinel，管道和编码器

特点
Jedis：使用阻塞的I/O，且其方法调用都是同步的，程序流需要等到sockets处理完I/O才能执行，不支持异步。Jedis客户端实例不是线程安全的，所以需要通过连接池来使用Jedis。
Jedis仅支持基本的数据类型如：String、Hash、List、Set、Sorted Set。
Redisson：基于Netty框架的事件驱动的通信层，其方法调用是异步的。Redisson的API是线程安全的，所以可以操作单个Redisson连接来完成各种操作。
Redisson不仅提供了一系列的分布式Java常用对象，基本可以与Java的基本数据结构通用，还提供了许多分布式服务，其中包括（BitSet, Set, Multimap, SortedSet, Map, List, Queue, BlockingQueue, Deque, BlockingDeque, Semaphore, Lock, AtomicLong, CountDownLatch, Publish / Subscribe, Bloom filter, Remote service, Spring cache, Executor service, Live Object service, Scheduler service）。
Lettuce：基于Netty框架的事件驱动的通信层，其方法调用是异步的。Lettuce的API是线程安全的，所以可以操作单个Lettuce连接来完成各种操作。



