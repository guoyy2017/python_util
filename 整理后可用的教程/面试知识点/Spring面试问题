Spring如何解决循环依赖
无法解决通过构造器注入构成的循环依赖，只能抛出BeanCurrentylyInCreationException异常表示循环依赖

Spring容器将每一个正在创建的bean标识符放在一个“当前创建bean池”中，bean表示符在创建过程中将一直保持在这个池中，因此，如果在创建bean过程中发现自己已经在“当前创建bean池”中，将抛出BeanCurrentylyInCreationException异常，表示循环依赖；对于创建完毕的bean，将从“当前创建bean池”中清除掉。

只能解决单例作用域的bean循环依赖。

setter循环依赖
 通过Spring容器提前暴露刚完成构造器注入但未完成其他步骤（如setter注入）的bean来完成的。通过提前暴露一个单例工厂方法，从而使其他bean能够引用到该bean。
 注：只能解决单例作用域的bean循环依赖。
 具体步骤：
 （1）Spring容器创建单例 a bean，首先根据无参构造器创建bean，并暴露一个“ObjectFactory”，用于返回一个提前暴露一个创建中的bean，并将 “a”标识符放到“当前创建bean池”，然后进行setter注入b;
 （2）Spring容器创建单例 b bean，首先根据无参构造器创建bean，并暴露一个“ObjectFactory”，用于返回一个提前暴露一个创建中的bean，并将 “b”标识符放到“当前创建bean池”，然后进行setter注入c;
 （3）Spring容器创建单例 c bean，首先根据无参构造器创建bean，并暴露一个“ObjectFactory”，用于返回一个提前暴露一个创建中的bean，并将 “c”标识符放到“当前创建bean池”，然后进行setter注入a;进行注入"a"时，由于提前暴露了“ObjectFactory”工厂，从而使用它返回提前暴露一个创建中的bean。
 （4）最后在依赖注入“b”和“a”，完成setter注入。


Spring是使用ApplicationContext的属性SetsingletonsCurrentlyInCreation来保存的，而半成品的A对象则是通过MapsingletonFactories来保存的


Spring 通过一个 BeanPostProcessor 对 @Autowired 进行解析，所以要让 @Autowired 起作用必须事先在 Spring 容器中声明 AutowiredAnnotationBeanPostProcessor Bean。

sql 执行顺序 from--where--group by--having--select--order by---limit

Spring Cloud Security Oauth2认证流程
@EnableAuthorizationServer注解
开启auth功能

jjwt是一个Java对jwt的支持库，我们使用这个库来创建、解码token
<dependency>
	<groupId>io.jsonwebtoken</groupId>
	<artifactId>jjwt</artifactId>
	<version>0.9.0</version>
</dependency>


AspectJAutoProxyBeanDefinitionParser
AnnotationAwareAspectJAutoProxyCreator 代理实现用到的类
ObjenesisCglibAopProxy
JdkDynamicAopProxy
AdvisedSupport
ProxyFactoryBean

调用链监控
CAT	Zipkin	PinPoint
#如果是使用rabbitmq则需要下面的配置
spring.zipkin.sender.type= rabbit

@EnableHystrix   //断路器
HystrixCommandAspect
@EnableCircuitBreaker
@Import初始化EnableCircuitBreakerImportSelector类
集成txlcn-tc 做分布式事务


JetCache 是由阿里巴巴开源的一款通用缓存访问框架
目前支持的缓存系统包括以下4个：
Caffeine（基于本地内存）
LinkedHashMap（基于本地内存，JetCache自己实现的简易LRU缓存）
Alibaba Tair（相关实现未在Github开源，在阿里内部Gitlab上可以找到）
Redis
主要是：@Cached(缓存新增)、@CacheUpdate(缓存更新)、@CacheInvalidate(缓存删除)，还有用于配置自动刷新和加载保护的“大杀器”：@CacheRefresh、@CachePenetrationProtect
@EnableMethodCache
用于激活@Cached注解的使用
@EnableCreateCacheAnnotation
用于激活@CreateCache注解的使用


阿里Sentinel整合Zuul网关详解
SentinelZuulPreFilter
pre过滤器，在请求路由之前匹配routeId和api，进行限流操作
SentinelZuulPostFilter
post过滤器，路由之后恢复资源
SentinelZuulErrorFilter
error过滤器，异常后的处理


父依赖配置
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-alibaba-dependencies</artifactId>
    <version>0.2.2.RELEASE</version>
     <type>pom</type>
    <scope>import</scope>
</dependency>


修改spring连接数
server:
  tomcat:
    uri-encoding: UTF-8
    max-threads: 1000
    max-connections: 20000

修改使用jetty
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
    <exclusions>
        <exclusion>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-tomcat</artifactId>
        </exclusion>
    </exclusions>
</dependency>
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-jetty</artifactId>
</dependency>

####Jetty specific properties########
server.jetty.acceptors= # Number of acceptor threads to use.
server.jetty.max-http-post-size=0 # Maximum size in bytes of the HTTP post or put content.
server.jetty.selectors= # Number of selector threads to use.
