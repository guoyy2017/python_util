Disruptor java 高性能队列
disruptor一般用于线程间消息的传递
学习教程地址
http://ifeve.com/disruptor/
使用教程
http://www.importnew.com/27652.html
jar包地址
<!-- https://mvnrepository.com/artifact/com.lmax/disruptor -->
<dependency>
    <groupId>com.lmax</groupId>
    <artifactId>disruptor</artifactId>
    <version>3.4.2</version>
</dependency>

=======================================================================================
教程
创建Disruptor 分单发布和多发布 ProducerType.SINGLE  ProducerType.MULTI
Disruptor<String> disruptor
消费者 分 单消费者|广播消费者|分组消费者
//单消费 implements EventHandler
disruptor.handleEventsWith(new Consumer());
//广播消费 并行处理 implements EventHandler
disruptor.handleEventsWith(new Consumer(), new Consumer(), new Consumer());
//广播消费 顺序处理 implements EventHandler
disruptor.handleEventsWith(new Consumer(), new Consumer(), new Consumer())
        .then(new Consumer(), new Consumer());
//分组消费 implements WorkHandler
disruptor.handleEventsWithWorkerPool(new Consumer(), new Consumer(), new Consumer());
//EventProcessor 自定义消费者关系
启动消费者
disruptor.start();
发布消息
RingBuffer<String> ring = disruptor.getRingBuffer();
ring.publishEvent(new Publisher(), "");
=======================================================================================



等待策略：
=======================================================================================
消费者在缓存中没有可以消费的事件时，采取的等待策略：
BlockingWaitStrategy：通过线程阻塞的方式，等待生产者唤醒
BusySpinWaitStrategy：线程一直自旋等待，比较耗CPU。
LiteBlockingWaitStrategy：通过线程阻塞的方式，等待生产者唤醒，比BlockingWaitStrategy要轻，某些情况下可以减少阻塞的次数。
PhasedBackoffWaitStrategy：根据指定的时间段参数和指定的等待策略决定采用哪种等待策略。
SleepingWaitStrategy：可通过参数设置，使线程通过Thread.yield()主动放弃执行，通过线程调度器重新调度；或一直自旋等待。
TimeoutBlockingWaitStrategy：通过参数设置阻塞时间，如果超时则抛出异常。
YieldingWaitStrategy： 通过Thread.yield()主动放弃执行，通过线程调度器重新调度。
=======================================================================================









