双指针 对撞指针
两数之和
给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。
使用双指针，一个指针左边，一个指针右边。
如果 curr > target，移动较大的元素，使得 sum 变小一些；
如果 curr< target，移动较小的元素，使得 sum 变大一些；
如果 curr= target，得到结果。

三数之和
首先将数组排序，创建一个空列表
选择一个数字做C位，运用对撞指针，left指向C位后一位，right指向尾部
然后循环，如果当前C位数和相邻的数相等，直接移动指针，避免重复
left < right,判断两个指针指向的元素与target相加与0的大小作比较。小于零的话，left向前走一位；大于零的话，right向后走一位；等于0就把target的下标索引，left，right值添加到列表中

最接近的三数之和
给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在唯一答案。
首先将数组排序，创建一个空列表
初始化一个最小距离a=abs(nums[0]+nums[1]+nums[2]-target),这三位数的和是nums[0]+nums[1]+nums[2]
选择一个数字做C位，运用对撞指针，left指向C位后一位，right指向尾部
然后循环，i位C位值，i+1为left值，最右为right值
当left<right,中心为与left、right的值相加与目标的绝对值与a的大小比较，如果小于a,则转移a。三位数之和转移，直到得到最小的a，则返回此时的三数之和。